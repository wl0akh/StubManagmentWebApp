{"id":"9a82c5c5-381c-2f99-aa9f-027c67002930","name":"SOAP-Base-Test-Stub","protocol":"http","port":"7999","defaultResponse":{"statusCode":"200","headers":{"Content-Type":"application/xml","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Origin, X-Requested-With, Content-Type, Accept","Access-Control-Allow-Methods":"GET, POST, PUT, PATCH, DELETE"},"body":"<Client>Client Address Not Found</Client >"},"operations":{"5320369d-6b5d-cf08-6942-d09177b01b5d":{"name":"ClientAddress","response":{"statusCode":"200","headers":{"Content-Type":"application/xml","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Origin, X-Requested-With, Content-Type, Accept","Access-Control-Allow-Methods":"GET, POST, PUT, PATCH, DELETE"},"body":"<LookupAddressesResponse>Not Found</LookupAddressesResponse>"},"parameters":[{"key":"PATH","in":"completePath","comparator":"contains","val":"/addressService"},{"key":"METHOD","in":"method","comparator":"==","val":"POST"}],"scenarios":{"3f3f133d-65b9-ef5b-b5ab-f397c6c3bdc0":{"name":"PostcodeIsEH2 1DG","tag":"PostCode","request":{"headers":{"Content-Type":"application/xml"}},"response":{"statusCode":"200","headers":{"Content-Type":"application/xml","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Origin, X-Requested-With, Content-Type, Accept","Access-Control-Allow-Methods":"GET, POST, PUT, PATCH, DELETE"},"body":"<LookupAddressesResponse>\n<Response>\n<Postcode>EH2 1DG</Postcode>\n<log>post code is EH2 1DG</log>\n</Response>\n</LookupAddressesResponse>"},"parameters":[{"key":"//Postcode","in":"body","comparator":"==","val":"EH2 1DG"},{"key":"Content-Type","in":"headers","comparator":"contains","val":"application/xml"}]},"105a9db1-3f53-b68d-3b19-6111d095f504":{"name":"EmptyPostcode","tag":"PostCode","request":{"headers":{"Content-Type":"application/xml"}},"response":{"statusCode":"200","headers":{"Content-Type":"application/xml","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Origin, X-Requested-With, Content-Type, Accept","Access-Control-Allow-Methods":"GET, POST, PUT, PATCH, DELETE"},"body":"<LookupAddressesResponse >PostcodeIsEmpty</LookupAddressesResponse>"},"parameters":[{"key":"//Postcode","in":"body","comparator":"empty","val":""},{"key":"Content-Type","in":"headers","comparator":"contains","val":"application/xml"}]},"319a2e71-fc1e-8855-2054-19e1b03d96a9":{"name":"PostcodeIsValid","tag":"PostCode","request":{"headers":{"Content-Type":"application/xml"}},"response":{"statusCode":"200","headers":{"Content-Type":"application/xml","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Origin, X-Requested-With, Content-Type, Accept","Access-Control-Allow-Methods":"GET, POST, PUT, PATCH, DELETE"},"body":"<LookupAddressesResponse>PostcodeIsValid</LookupAddressesResponse>"},"parameters":[{"key":"//Postcode","in":"body","comparator":"RegEx","val":"([Gg][Ii][Rr] 0[Aa]{2})|((([A-Za-z][0-9]{1,2})|(([A-Za-z][A-Ha-hJ-Yj-y][0-9]{1,2})|(([A-Za-z][0-9][A-Za-z])|([A-Za-z][A-Ha-hJ-Yj-y][0-9]?[A-Za-z]))))\\s?[0-9][A-Za-z]{2})"},{"key":"//validate","in":"body","comparator":"==","val":"true"},{"key":"Content-Type","in":"headers","comparator":"contains","val":"application/xml"}]}}}},"stubs":[{"responses":[{"inject":"function (request, state, logger){ \r\n\r\n function convertXpath(xpath){\r\n if(xpath.indexOf(\"::\") > -1  || xpath.indexOf(\"|\") > -1  ||  xpath.indexOf(\".\") > -1  ){ return xpath;\r\n }else{ \r\n var arr = xpath.split(\"/\").map(function (val) {  \r\nif(val.length==0 || val.startsWith(\"@\")){ \r\nreturn val; \r\n }\r\nelse if(xpath.indexOf(\"[\") > -1 ){\r\nvar betweenBrackits =val.substring(val.lastIndexOf(\"[\")+1,val.lastIndexOf(\"]\"));\r\nvar nameToBeUsed =val.substring(0,val.lastIndexOf(\"[\"));\r\nreturn \"*[name()='\"+nameToBeUsed+\"' and \"+betweenBrackits+\" ]\";\r\n }\r\nelse if(!(xpath.indexOf(\"[\") > -1 ) && xpath.indexOf(\":\") > -1 ){\r\nreturn \"*[name()='\"+val+\"']\";\r\n }\r\nelse{\r\nreturn val;\r\n} \r\n});\r\nvar outPutXpath=\"\";\r\nvar arr = arr.forEach(function (val,index) {  if(index==0){ return; } else {outPutXpath+=\"/\"+val+\"\";} });\r\nreturn outPutXpath;\r\n  }\r\n}\r\nfunction compareString(A,B,comparator){\r\ntry{\r\nif(comparator==\"==\"){  \r\n    return (A.toLowerCase()==B.toLowerCase())?true:false;\r\n}else if(comparator==\"!=\"){  \r\nreturn (A.toLowerCase()!=B.toLowerCase())?true:false;\r\n}else if(comparator==\"contains\"){  \r\nreturn (A.toLowerCase().indexOf(B.toLowerCase()) > -1)?true:false;\r\n}else if(comparator==\"!contains\"){  \r\nreturn (A.toLowerCase().indexOf(B.toLowerCase()) == -1)?true:false;\r\n}else if(comparator==\"RegEx\"){  \r\nreturn (A.match(new RegExp(B,\"g\"))!=null)?true:false;\r\n}else if(comparator==\"!RegEx\"){  \r\nreturn (A.match(new RegExp(B,\"g\"))===null)?true:false;\r\n}\r\nelse if(comparator==\"exist\"){  \r\nreturn ( typeof A !== 'undefined' && A )?true:false;\r\n}else if(comparator==\"!exist\"){ \r\nreturn (  A === null  )?true:false;\r\n}\r\nelse if(comparator==\"!empty\"){  \r\nreturn ( A !== \"\" )?true:false;\r\n}else if(comparator==\"empty\"){ \r\nreturn (  A === \"\"  )?true:false;\r\n}\r\nelse{  return false;}\r\n}catch(error){\r\n    console.log(\"\\r\\nCompareError: \"+error.toString()+\"\\r\\n\");\r\nreturn false;\r\n}\r\n\r\n}\r\nfunction compareElementValueForXpath(xpath,xml,val,comparator){\r\nvar parameterValue=null;\r\ntry{\r\nvar dom = require('xmldom').DOMParser;\r\nvar xpathPackage  = require('xpath');\r\nvar doc = new dom().parseFromString(xml);\r\nvar nodes = xpathPackage.select(convertXpath(xpath), doc);\r\nif(typeof nodes[0].childNodes !== 'undefined' && nodes[0].childNodes && typeof nodes[0].childNodes[0] !== 'undefined' && nodes[0].childNodes[0])\r\nparameterValue=nodes[0].childNodes[0].nodeValue;\r\nelse if(typeof nodes[0].childNodes !== 'undefined' && nodes[0].childNodes )\r\nparameterValue=\"\";\r\nelse\r\nparameterValue=null;\r\nconsole.log(xpath+\"---> \"+parameterValue);\r\nreturn compareString(parameterValue,val,comparator);\r\n}catch(error){\r\n    console.log(\"Error:-\"+xpath+\"---> \"+parameterValue);\r\nreturn compareString(parameterValue,val,comparator);\r\n}\r\n}\r\n\r\nfunction compareElementValueForJsonPath(jsonPath,possibleJSON,val,comparator){\r\n    var parameterValue=null;\r\ntry{\r\n  var json = (typeof possibleJSON === 'object') ? possibleJSON : JSON.parse(possibleJSON);\r\n var JSONPath = require('jsonpath-plus');\r\n var result = JSONPath({json:json,path:jsonPath});\r\n if( result instanceof Array && result.length>0)\r\n parameterValue=result.toString();\r\n\r\nreturn compareString(parameterValue ,val,comparator);\r\n}catch(error){\r\n\r\nreturn compareString(parameterValue ,val,comparator);\r\n}\r\n}\r\n\r\nfunction compareElementValueForQueryFormHeaderMethodPath(keyOfParameter,possibleQueryFormHeaderMethodPath,val,comparator){\r\n \r\nreturn (keyOfParameter=='method' || keyOfParameter=='path')?compareString(possibleQueryFormHeaderMethodPath,val,comparator):compareString(possibleQueryFormHeaderMethodPath[keyOfParameter],val,comparator);\r\n}\r\n\r\nfunction compareElementValueInPath(keyOfParameter,possiblePath,val,comparator){\r\nvar parameterValue=null\r\nkeyOfParameter=keyOfParameter.replace(new RegExp(\"{\", 'g'), \"\").replace(new RegExp(\"Id}\", 'g'), \"\").replace(new RegExp(\"Id\", 'g'), \"\");\r\nvar keyOfParameters=keyOfParameter+\"s/\";\r\npossiblePath=possiblePath.toLowerCase();\r\nif(possiblePath.lastIndexOf(keyOfParameters) > -1){\r\nvar firstIndex= possiblePath.lastIndexOf(keyOfParameters)+keyOfParameters.length;\r\nvar restString=possiblePath.substring(firstIndex,possiblePath.length);\r\nparameterValue= (restString.indexOf(\"/\") >-1)?(restString.substring(0,restString.indexOf(\"/\"))):restString;\r\nreturn compareString(parameterValue,val,comparator);\r\n}else{\r\nreturn compareString(parameterValue,val,comparator);\r\n}\r\n\r\n\r\n}\r\n\r\nfunction requestValidator(request){\r\n        return (\r\n                       ( typeof request !== 'undefined' && request ) \r\n                );\r\n}\r\n\r\nfunction parameterValidator(parameter){\r\n    return ( \r\n        ( typeof parameter !== 'undefined' && parameter ) \r\n        && ( typeof parameter.key !== 'undefined' && parameter.key ) \r\n        && ( typeof parameter.in !== 'undefined' && parameter.in )  \r\n        && ( typeof parameter.val !== 'undefined' && parameter.val )  \r\n        && ( typeof parameter.comparator !== 'undefined' && parameter.comparator )\r\n        );\r\n\r\n}\r\nfunction processParameter(request,parameter){\r\n\r\nif( !parameterValidator(parameter) && !requestValidator(request)){\r\n    return false;\r\n}\r\nelse if(parameter.in==\"body\" ){\r\n    if(request.headers['Content-Type'].indexOf(\"application/xml\")>-1){ \r\n        return compareElementValueForXpath(parameter.key,request.body,parameter.val,parameter.comparator);}\r\n    else if(request.headers['Content-Type'].indexOf(\"application/json\")>-1){   \r\n        return compareElementValueForJsonPath(parameter.key,request.body,parameter.val,parameter.comparator);}\r\n    else{ return false;}\r\n}\r\nelse if(parameter.in==\"query\" || parameter.in==\"form\" || parameter.in==\"headers\" || parameter.in==\"method\" || parameter.in==\"completePath\"){\r\n    if( parameter.in==\"query\" && ( typeof request.query !== 'undefined' && request.query ) ){  \r\n        return compareElementValueForQueryFormHeaderMethodPath(parameter.key,request.query,parameter.val,parameter.comparator); \r\n    }\r\n    else if( parameter.in==\"form\" && ( typeof request.form !== 'undefined' && request.form )  ){ \r\n     return compareElementValueForQueryFormHeaderMethodPath(parameter.key,request.form,parameter.val,parameter.comparator);\r\n      }\r\n    else if( parameter.in==\"headers\" && ( typeof request.headers !== 'undefined' && request.headers )  ){ \r\n     return compareElementValueForQueryFormHeaderMethodPath(parameter.key,request.headers,parameter.val,parameter.comparator);\r\n      }\r\n    else if( parameter.in==\"method\" && ( typeof request.method !== 'undefined' && request.method )  ){\r\n       return compareElementValueForQueryFormHeaderMethodPath(\"method\",request.method,parameter.val,parameter.comparator);\r\n        }\r\n    else if( parameter.in==\"completePath\" && ( typeof request.path !== 'undefined' && request.path )  ){ \r\n     return compareElementValueForQueryFormHeaderMethodPath(\"path\",request.path,parameter.val,parameter.comparator);\r\n      }\r\n    else{ return false}\r\n    \r\n    \r\n}\r\nelse if(parameter.in==\"path\"  && ( typeof request.path !== 'undefined' && request.path ) ){\r\n    return compareElementValueInPath(parameter.key,request.path,parameter.val,parameter.comparator);\r\n}\r\nelse{ \r\n    return false;\r\n}\r\n\r\n\r\n}\r\n\r\nfunction parametersValidator(parameters){\r\nreturn  (typeof parameters !== 'undefined' && parameters && parameters.constructor === Array && parameters.length>0);\r\n}\r\nfunction processParameters(request,parameters){\r\nif( requestValidator(request) && parametersValidator(parameters)){\r\nvar parametersPassed=0;\r\nparameters.forEach(function(val){\r\nif(processParameter(request,val)){\r\n    parametersPassed++;\r\n}});\r\nreturn(parametersPassed==parameters.length);\r\n    }else{\r\n        return false;\r\n    }\r\n\r\n\r\n}\r\n\r\nfunction scenarioValidator(scenario){\r\nreturn  (\r\n    ( typeof scenario !== 'undefined' && scenario)\r\n&& ( typeof scenario.request !== 'undefined' && scenario.request )\r\n&& ( typeof scenario.request.headers !== 'undefined' && scenario.request.headers )\r\n&& ( typeof scenario.request.headers['Content-Type'] !== 'undefined' && scenario.request.headers['Content-Type'] )\r\n&& ( typeof scenario.parameters !== 'undefined' && scenario.parameters )\r\n&& ( typeof scenario.response !== 'undefined' && scenario.response )\r\n&& ( typeof scenario.response.statusCode !== 'undefined' && scenario.response.statusCode ));\r\n}\r\n\r\nfunction processScenario(request,scenario,operationResponse){\r\n    var response=operationResponse;\r\nconsole.log(\"\\r\\n\"+scenario.name+\"==>\"+processParameters(request,scenario.parameters)  );\r\nif(!requestValidator(request) && !scenarioValidator(scenario)){\r\nresponse= operationResponse;\r\n}else{\r\nresponse= processParameters(request,scenario.parameters)?scenario.response:operationResponse;\r\n}\r\n\r\nreturn populateParametersInResponse(request,response);\r\n\r\n}\r\n\r\nfunction processScenarios(request,scenarios,operationResponse){\r\n    var response=operationResponse;\r\ntry{\r\nif(!requestValidator(request) && !( typeof scenario !== 'undefined' && scenario)){\r\nresponse=operationResponse;\r\n}else{\r\n\r\n    for(var scenarioId in scenarios) {\r\n    if (scenarios.hasOwnProperty(scenarioId)) {\r\nvar processedResponse=processScenario(request,scenarios[scenarioId],operationResponse);\r\n    response=(processedResponse!=operationResponse)?processedResponse:response;        \r\n    }else{\r\nresponse=operationResponse;\r\n    }\r\n}\r\n}\r\nreturn populateParametersInResponse(request,response);\r\n\r\n}catch(error){\r\nreturn populateParametersInResponse(request,response);\r\n}\r\n\r\n}\r\nfunction operationValidator(operation){\r\nreturn( \r\n   ( typeof operation !== 'undefined' && operation)\r\n&& ( typeof operation.parameters !== 'undefined' && operation.parameters )\r\n&& ( typeof operation.scenarios !== 'undefined' && operation.scenarios )\r\n&& ( typeof operation.response !== 'undefined' && operation.response )\r\n&& ( typeof operation.response.statusCode !== 'undefined' && operation.response.statusCode )\r\n);\r\n\r\n}\r\nfunction processOperation(request,operation,stubResponse){\r\n    var response=stubResponse;\r\ntry{\r\nif(!requestValidator(request) && !operationValidator(operation)){\r\nresponse=stubResponse;\r\n}else{\r\n response=processParameters(request,operation.parameters)?processScenarios(request,operation.scenarios,operation.response):stubResponse;\r\n}\r\n\r\nreturn populateParametersInResponse(request,response);\r\n\r\n}catch(error){\r\n    console.log(\"/n/n\\n\\n error:\"+error  );\r\nreturn populateParametersInResponse(request,response);\r\n}\r\n\r\n}\r\n\r\nfunction processOperations(request,operations,stubResponse){\r\n    console.log(\"\\r\\n+++++++\"+JSON.stringify(request));\r\n    var response=stubResponse;\r\ntry{\r\nif(!requestValidator(request) &&  !( typeof operations !== 'undefined' && operations)){\r\n\r\nresponse=stubResponse;\r\n}else{\r\n\r\n  \r\n    for(var operationId in operations) {\r\n    \r\n    if (operations.hasOwnProperty(operationId)) {\r\nvar processedResponse=processOperation(request,operations[operationId],stubResponse);\r\nresponse=(processedResponse!=stubResponse)?processedResponse:response;\r\n\r\n    }else{\r\nresponse=stubResponse;\r\n    }\r\n}\r\n\r\n \r\n}\r\n\r\nreturn populateParametersInResponse(request,response);\r\n}catch(error){\r\nreturn populateParametersInResponse(request,response);\r\n}\r\n\r\n}\r\nfunction populateParametersInResponse(request,response){\r\n    var body=\"\";\r\n    if(typeof response.body !== 'undefined' && response.body){\r\n    var responseBody=(typeof response.body==\"string\")?response.body:JSON.stringify(response.body);\r\n     body= populateParameters(request,responseBody.toString());\r\n    response.body=body;\r\n}\r\n    return response;\r\n    }\r\n    function populateParameters(request,responseBody){\r\n        var key=responseBody.substring(responseBody.lastIndexOf(\"$%\")+1,responseBody.lastIndexOf(\"%$\"));\r\n     \r\n        if(key.length>0){\r\n            responseBody=responseBody.replace(\"$\"+key+\"%$\",getDynamicValueFromRequest(request,key.replace(new RegExp(\" \", 'g'),\"\").replace(new RegExp(\"%\", 'g'),\"\")));\r\n\r\n            return populateParameters(request,responseBody);\r\n        }else{\r\n        return responseBody;\r\n        }\r\n        }\r\n    \r\n    function getDynamicValueFromRequest(request,keyOfParameter){\r\n    var parameterValue=\"\";\r\n    keyOfParameterInPath=keyOfParameter.replace(new RegExp(\"{\", 'g'), \"\").replace(new RegExp(\"Id}\", 'g'), \"\").replace(new RegExp(\"Id\", 'g'), \"\");\r\n    var keyOfParameterInPath=keyOfParameterInPath+\"s/\";\r\n    var possiblePath=request.path.toLowerCase();\r\n    if(possiblePath.lastIndexOf(keyOfParameterInPath) > -1){\r\n    var firstIndex= possiblePath.lastIndexOf(keyOfParameterInPath)+keyOfParameterInPath.length;\r\n    var restString=possiblePath.substring(firstIndex,possiblePath.length);\r\n    var value= (restString.indexOf(\"/\") >-1)?(restString.substring(0,restString.indexOf(\"/\"))):restString;\r\n     if(typeof value !== 'undefined' && value && value.length>0) parameterValue=value;    \r\n    }\r\n    if( parameterValue==\"\" && typeof request.query !== 'undefined' && request.query && typeof request.query[keyOfParameter] !== 'undefined' && request.query[keyOfParameter] && request.query[keyOfParameter].length>0) \r\n    parameterValue= request.query[keyOfParameter];\r\n    \r\n\r\n    if( parameterValue==\"\" && typeof request.form !== 'undefined' && request.form && typeof request.form[keyOfParameter] !== 'undefined' && request.form[keyOfParameter] && request.form[keyOfParameter].length>0) \r\n    parameterValue= request.form[keyOfParameter];\r\n    \r\n\r\n\r\n    if(parameterValue==\"\" && typeof request.headers !== 'undefined' && request.headers && typeof request.headers[keyOfParameter] !== 'undefined' && request.headers[keyOfParameter] && request.headers[keyOfParameter].length>0) \r\n    parameterValue= request.headers[keyOfParameter];\r\n    \r\n\r\nif(request.body.length>0) {\r\n\r\n   if(parameterValue==\"\"){\r\n        try{\r\n  \r\n        var dom = require('xmldom').DOMParser;\r\n        var xpathPackage  = require('xpath');\r\n        var doc = new dom().parseFromString(request.body);  \r\n        var nodes = xpathPackage.select(convertXpath(keyOfParameter), doc);\r\n        if(typeof nodes[0].childNodes !== 'undefined' && nodes[0].childNodes && typeof nodes[0].childNodes[0] !== 'undefined' && nodes[0].childNodes[0])\r\n        parameterValue=nodes[0].childNodes[0].nodeValue;\r\n        else if(typeof nodes[0].childNodes !== 'undefined' && nodes[0].childNodes )\r\n        parameterValue=\"\";\r\n        else\r\n        parameterValue=null;\r\n\r\n        }catch(error){\r\n            parameterValue=\"\";\r\n        }\r\n    \r\n        if(parameterValue==\"\"){\r\n        try{\r\n            var json = (typeof request.body === 'object') ? request.body : JSON.parse(request.body);\r\n            var JSONPath = require('jsonpath-plus');\r\n            var result = JSONPath({json:json,path:keyOfParameter});\r\n            if( result instanceof Array && result.length>0)\r\n            parameterValue=result.toString();\r\n          }catch(error){\r\n              parameterValue=\"\";\r\n          }\r\n        }\r\n    }\r\n    }\r\n    // console.log(\"DynamicParameters  \"+keyOfParameter+\"====>\"+parameterValue);\r\n    return parameterValue;\r\n    }\r\n    \r\n    \r\n    module.exports = {\r\n        processParameters:processParameters,\r\n        convertXpath:convertXpath,\r\n        compareString:compareString,\r\n        compareElementValueForXpath:compareElementValueForXpath,\r\n        compareElementValueForJsonPath:compareElementValueForJsonPath,\r\n        compareElementValueForQueryFormHeaderMethodPath:compareElementValueForQueryFormHeaderMethodPath,\r\n        compareElementValueInPath:compareElementValueInPath,\r\n        requestValidator:requestValidator,\r\n        parameterValidator:parameterValidator,\r\n        processParameter:processParameter,\r\n        parametersValidator:parametersValidator,\r\n        scenarioValidator:scenarioValidator,\r\n        processScenario:processScenario,\r\n        processScenarios:processScenarios,\r\n        operationValidator:operationValidator,\r\n        processOperation:processOperation,\r\n        processOperations:processOperations,\r\n        getDynamicValueFromRequest:getDynamicValueFromRequest,\r\n        populateParametersInResponse:populateParametersInResponse\r\n    };\r\n    return processOperations(request,JSON.parse(\"{\\\"5320369d-6b5d-cf08-6942-d09177b01b5d\\\":{\\\"name\\\":\\\"ClientAddress\\\",\\\"response\\\":{\\\"statusCode\\\":\\\"200\\\",\\\"headers\\\":{\\\"Content-Type\\\":\\\"application/xml\\\",\\\"Access-Control-Allow-Origin\\\":\\\"*\\\",\\\"Access-Control-Allow-Headers\\\":\\\"Origin, X-Requested-With, Content-Type, Accept\\\",\\\"Access-Control-Allow-Methods\\\":\\\"GET, POST, PUT, PATCH, DELETE\\\"},\\\"body\\\":\\\"<LookupAddressesResponse>Not Found</LookupAddressesResponse>\\\"},\\\"parameters\\\":[{\\\"key\\\":\\\"PATH\\\",\\\"in\\\":\\\"completePath\\\",\\\"comparator\\\":\\\"contains\\\",\\\"val\\\":\\\"/addressService\\\"},{\\\"key\\\":\\\"METHOD\\\",\\\"in\\\":\\\"method\\\",\\\"comparator\\\":\\\"==\\\",\\\"val\\\":\\\"POST\\\"}],\\\"scenarios\\\":{\\\"3f3f133d-65b9-ef5b-b5ab-f397c6c3bdc0\\\":{\\\"name\\\":\\\"PostcodeIsEH2 1DG\\\",\\\"tag\\\":\\\"PostCode\\\",\\\"request\\\":{\\\"headers\\\":{\\\"Content-Type\\\":\\\"application/xml\\\"}},\\\"response\\\":{\\\"statusCode\\\":\\\"200\\\",\\\"headers\\\":{\\\"Content-Type\\\":\\\"application/xml\\\",\\\"Access-Control-Allow-Origin\\\":\\\"*\\\",\\\"Access-Control-Allow-Headers\\\":\\\"Origin, X-Requested-With, Content-Type, Accept\\\",\\\"Access-Control-Allow-Methods\\\":\\\"GET, POST, PUT, PATCH, DELETE\\\"},\\\"body\\\":\\\"<LookupAddressesResponse>\\\\n<Response>\\\\n<Postcode>EH2 1DG</Postcode>\\\\n<log>post code is EH2 1DG</log>\\\\n</Response>\\\\n</LookupAddressesResponse>\\\"},\\\"parameters\\\":[{\\\"key\\\":\\\"//Postcode\\\",\\\"in\\\":\\\"body\\\",\\\"comparator\\\":\\\"==\\\",\\\"val\\\":\\\"EH2 1DG\\\"},{\\\"key\\\":\\\"Content-Type\\\",\\\"in\\\":\\\"headers\\\",\\\"comparator\\\":\\\"contains\\\",\\\"val\\\":\\\"application/xml\\\"}]},\\\"105a9db1-3f53-b68d-3b19-6111d095f504\\\":{\\\"name\\\":\\\"EmptyPostcode\\\",\\\"tag\\\":\\\"PostCode\\\",\\\"request\\\":{\\\"headers\\\":{\\\"Content-Type\\\":\\\"application/xml\\\"}},\\\"response\\\":{\\\"statusCode\\\":\\\"200\\\",\\\"headers\\\":{\\\"Content-Type\\\":\\\"application/xml\\\",\\\"Access-Control-Allow-Origin\\\":\\\"*\\\",\\\"Access-Control-Allow-Headers\\\":\\\"Origin, X-Requested-With, Content-Type, Accept\\\",\\\"Access-Control-Allow-Methods\\\":\\\"GET, POST, PUT, PATCH, DELETE\\\"},\\\"body\\\":\\\"<LookupAddressesResponse >PostcodeIsEmpty</LookupAddressesResponse>\\\"},\\\"parameters\\\":[{\\\"key\\\":\\\"//Postcode\\\",\\\"in\\\":\\\"body\\\",\\\"comparator\\\":\\\"empty\\\",\\\"val\\\":\\\"\\\"},{\\\"key\\\":\\\"Content-Type\\\",\\\"in\\\":\\\"headers\\\",\\\"comparator\\\":\\\"contains\\\",\\\"val\\\":\\\"application/xml\\\"}]},\\\"319a2e71-fc1e-8855-2054-19e1b03d96a9\\\":{\\\"name\\\":\\\"PostcodeIsValid\\\",\\\"tag\\\":\\\"PostCode\\\",\\\"request\\\":{\\\"headers\\\":{\\\"Content-Type\\\":\\\"application/xml\\\"}},\\\"response\\\":{\\\"statusCode\\\":\\\"200\\\",\\\"headers\\\":{\\\"Content-Type\\\":\\\"application/xml\\\",\\\"Access-Control-Allow-Origin\\\":\\\"*\\\",\\\"Access-Control-Allow-Headers\\\":\\\"Origin, X-Requested-With, Content-Type, Accept\\\",\\\"Access-Control-Allow-Methods\\\":\\\"GET, POST, PUT, PATCH, DELETE\\\"},\\\"body\\\":\\\"<LookupAddressesResponse>PostcodeIsValid</LookupAddressesResponse>\\\"},\\\"parameters\\\":[{\\\"key\\\":\\\"//Postcode\\\",\\\"in\\\":\\\"body\\\",\\\"comparator\\\":\\\"RegEx\\\",\\\"val\\\":\\\"([Gg][Ii][Rr] 0[Aa]{2})|((([A-Za-z][0-9]{1,2})|(([A-Za-z][A-Ha-hJ-Yj-y][0-9]{1,2})|(([A-Za-z][0-9][A-Za-z])|([A-Za-z][A-Ha-hJ-Yj-y][0-9]?[A-Za-z]))))\\\\\\\\s?[0-9][A-Za-z]{2})\\\"},{\\\"key\\\":\\\"//validate\\\",\\\"in\\\":\\\"body\\\",\\\"comparator\\\":\\\"==\\\",\\\"val\\\":\\\"true\\\"},{\\\"key\\\":\\\"Content-Type\\\",\\\"in\\\":\\\"headers\\\",\\\"comparator\\\":\\\"contains\\\",\\\"val\\\":\\\"application/xml\\\"}]}}}}\"),JSON.parse(\"{\\\"statusCode\\\":\\\"200\\\",\\\"headers\\\":{\\\"Content-Type\\\":\\\"application/xml\\\",\\\"Access-Control-Allow-Origin\\\":\\\"*\\\",\\\"Access-Control-Allow-Headers\\\":\\\"Origin, X-Requested-With, Content-Type, Accept\\\",\\\"Access-Control-Allow-Methods\\\":\\\"GET, POST, PUT, PATCH, DELETE\\\"},\\\"body\\\":\\\"<Client>Client Address Not Found</Client >\\\"}\"));}"}]}]}